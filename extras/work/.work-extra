#!/usr/bin/env bash

export PATH=$PATH:/c/Users/douglasm/stash/scripts:/c/Users/douglasm/stash/solution_helpers/graviton:/c/Users/douglasm/stash/solution_helpers/network:~/amadeus/solutions/flow-playbooks/:/c/chromedriver
export PATH=$PATH:$HOME/.npm-global/bin

export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64

alias chrome="/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe"

# GIT Configurations
GIT_AUTHOR_NAME="Douglas Morand"
GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"
git config --global user.name "$GIT_AUTHOR_NAME"
GIT_AUTHOR_EMAIL="douglas.morand@orionhealth.com"
GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"
git config --global user.email "$GIT_AUTHOR_EMAIL"

if [ -f ~/.ssh-agent ]; then . ~/.ssh-agent; fi

#sudo cp ~/dotfiles/extras/windows/resolv.conf /etc/resolv.conf

## Environment Variabes
export GRAVITON_BD_ES_TOKEN="Basic YWRtaW46T1lNcmRydVpHUkV1bGt6NWdGSmlxbFgxTUNvbFoxNEI="
export INTDEV_BD_ES_TOKEN="Basic WXZuWWtlcVo5QzNJUWlOYUpXeXNXRXFic2V0ZTZaMFI="

# Python virtual environments
export WORKON_HOME=$HOME/.virtualenvs   # Optional
export PROJECT_HOME=$HOME/python_projects     # Optional
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export VIRTUALENVWRAPPER_VIRTUALENV=$HOME/.local/bin/virtualenv
source $HOME/.local/bin/virtualenvwrapper.sh
## 

exe() { echo "\$ $@" ; "$@" ; }

function httpProxy(){
    echo "Socks proxy config(s):"
    echo    "11048 - graviton"
    echo    "12048 - bastion"
    if [[ $# -ne 1 ]]; then
        echo "Must provide socks port"
    else
        socksPort=$1

        hpts -s 127.0.0.1:${socksPort} -p 8888
    fi
}

function sshTunnels(){
    ssh_procs=$(pgrep ssh -xla | grep -v "graviton")
    while IFS= read -r line; do
        echo "line -> $line"
    done <<< "$ssh_procs"
}

function proxy-jumphost(){
    echo "Starting ssh proxy in background on port: 12345"
    ssh -D 12345 -N douglasm@graviton-jump-host-scottsdale 2>&1 & 
    pid=$!
    echo "Kill process $pid once finished..."
}

function tunnel-graviton(){
    # Builds tunnels via the graviton jumphost
    #
    # Arg 1 - hostname to tunnel e.g. hbc-review-graviton-jump-host-scottsdale.graviton.odl.io
    # Arg 2..n - Files to setup tunnels

    tunnels=()
    graviton_env=$1
    echo "Building Tunnels"
    echo "======================================"
    for tunnelFile in ${@:2}; do
        while IFS= read line
        do
            if [[ ! -z "$line" && "$line" != "#"* ]]; then
                host=${line/<HOST>/$graviton_env}
                echo $host
                tunnels+=("-L $host")
            fi
        done < "$tunnelFile"
    done
    echo ""
	exe ssh graviton-jump-host "${tunnels[@]}"
}

function tunnel-bastion(){
    # Builds tunnels via the Bastion jumphost
    # Pass 1..n files to setup tunnels

    tunnels=()
    for tunnelFile in ${@:1}; do
        while IFS= read line
        do
            if [[ ! -z "$line" && "$line" != "#"* ]]; then
                echo "Tunnel -> $line"
                tunnels+=("-L $line")
            fi
        done < "$tunnelFile"
    done
	exe ssh bastion.us-west-2.orionhealth-saas-mgmt.com -D12345 "${tunnels[@]}"
}

function ssh-aws(){
    ssh -i ~/.ssh/puppet_id_rsa centos@$1
}

function pushJumphost(){
    if [[ $# -ne 1 ]]; then
        echo "Must declare target directory.  E.g. solutions/hbc_review"
        return 1
    fi

    rsync -rvzh --progress .gitignore graviton-jump-host:~/$1/.gitignore	
    rsync -rvzh --progress --stats --filter=':- .gitignore' . graviton-jump-host:~/$1
}

function pullJumphost(){
    if [[ $# -ne 1 ]]; then
        echo "Must declare target directory.  E.g. solutions/hbc_review"
        return 1
    fi

    rsync -azv --progress graviton-jump-host:~/$1/.gitignore .
    rsync -avzh --delete --progress --stats --filter=':- .gitignore' graviton-jump-host:~/$1/ .
    #rsync -rzvh --size-only --delete --progress --stats --filter=':- .gitignore' graviton-jump-host:~/$1/ .
}

function downloadGravitonLogs(){
    jumphost="graviton-jump-host"
    solution=""
    
    while getopts ":j:s:" opt; do
        case $opt in
            j)
                jumphost=$OPTARG
                echo "-j was triggered, param: $jumphost" >&2
                ;;
            s)
                solution=$OPTARG
                echo "-s was triggered, param: $solution" >&2
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                return 1
                ;;
            :)
                echo "Option $OPTARG requires an argument" >&2
                return 1
                ;;
        esac
    done 

    if [[ -z "$solution" ]]; then
        echo "Must declare a solution directory. e.g. solutions/hbc_review"
        return 1
    fi

    # compress up the log files
    echo "Retrieving logs from $jumphost [$solution], and packaging up for copy..."
    #&> /dev/null
    
    ssh $jumphost -- "cd ~/$solution; graviton retrieve-logs -p ec2; tar -vczf graviton_logs.tar.gz graviton.log agent-logs/" &> /dev/null
    # scp the file
    echo "Copying graviton logs"
    scp $jumphost:~/$solution/graviton_logs.tar.gz .
    
    echo "Cleaning up..."
    ssh $jumphost -- "cd ~/$solution; rm graviton_logs.tar.gz" &>/dev/null
}

# NOT USED
run_ticker() {
  pid=$1 # Process Id of the previous running command
  text=$2
  spin='-\|/'
  i=0
  while kill -0 $pid 2>/dev/null
  do
    i=$(( (i+1) %4 ))
    printf "\r$text ${spin:$i:1}"
    sleep .1
  done
}